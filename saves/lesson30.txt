package render

// render.go - lesson 30 - simple templating cache system
import (
	"fmt"
	"html/template"
	"log"
	"net/http"
)

// renderTemplate is where we will be rendering all templates through
func RenderTemplateOriginal(w http.ResponseWriter, page string) {
	t, err := template.ParseFiles("./templates/"+page, "./templates/base.layout.tmpl")
	if err != nil {
		log.Println(err)
		return
	}

	err = t.Execute(w, nil)
	if err != nil {
		log.Println("error parsing templates:", err)
		return
	}
}

// templateCash it's a package level map variable
var templateCash = make(map[string]*template.Template)

func RenderTemplate(w http.ResponseWriter, t string) {
	var tmpl *template.Template
	var err error

	// check to see if we already have te template in our cache
	_, inMap := templateCash[t]

	if !inMap {
		log.Println("creating template and adding to cache")
		err = createTemplateCache(t)
		if err != nil {
			log.Println("error creating templates:", err)
		}
	} else {
		log.Println("using cache template")
	}

	tmpl = templateCash[t]

	err = tmpl.Execute(w, nil)
	if err != nil {
		log.Println("error executing templates", err)
	}
}

func createTemplateCache(t string) error {
	templates := []string{
		/*
			Now, one thing to bear in mind, as your application becomes more complex and you have more layouts
			and you have more files, you're including partials, for example.
			All you have to do is to add one entry for each of those files that are included in any page on your site.
		*/
		fmt.Sprintf("./templates/%s", t), "./templates/base.layout.tmpl",
	}

	tmpl, err := template.ParseFiles(templates...)
	if err != nil {
		return err
	}
	templateCash[t] = tmpl

	return nil

}
