Udemy - Building Modern Web Applications with Go (Golang)

	
# You never have to bother pointing a passing a pointer to a map.
# You can just pass the map itself and that map will remain constant no matter where in the program it is accessed.
# Another point to know about maps is maps are programmatically built into the system, not sorted.
# So if you put things into a map in a certain order and then you try to access them later on, you cannot assume that they are going to be in the order.

# If you don't know what data type you you're going to be storing in there, you can in fact, and this is not recommended, but you can put in type interface followed by an opening and closing curly brackets,
# and that will actually store anything you want.
# The problem is you have to cast it from what it is in the map back into what it needs to be in order to be useful for you.
# So this is really kind of a kludge, and I wouldn't do that.


# in GO a string is actually a slice of bytes or runes as runes are bytes.

# Channels are unic to Go - And channels are not that difficult, but they are incredibly useful.
# They are a means of sending information from one part of your program to another part of your program very easily.

# the functions used in the JSON package in GO are called marshall and unmarshalled.

# Run a test coverage on current program.
--> go test -coverprofile=coverage.out && go tool cover -html=coverage.out

# Lesson 26 A note for Windows Users
# Mac / Linux execute
--> go run *.go
# Windows users execute or (Linux & Mac)
--> go run .
# New run format fro all platforms
--> go run ./cmd/web

# CSRFToken = That CSRF token stands for cross site request forgery token.

# Go modules are package management for Go

--> go get -u github.com/bmizerany/pat
--> go get -u github.com/justinas/nosurf
--> go get -u github.com/go-chi/chi/v5
--> go get -u github.com/alexedwards/scs/v2

# Lesson 47 - in style element-size: 1em; = stands for the width of a capital letter M.

# Lesson 58 - greate example of using sweetalert2 for popup datepicker in page.

# Style sheet directives
--> .className (to use class always start with a . )
--> #idName (to use id tag always start with a # )

# Completed - 27. Reorganizing our code, and adding some basic styling to pages
# Completed - 28. Enabling Go Modules and refactoring our code to use packages
# Completed - 29. Working with Layouts
# Completed - 30. Building a simple template cache
# Completed - 31. Building a more complex template cache
# Completed - 32. A note about the next lectures
# Completed - 33. Setting application wide configuration
# Completed - 34. Why the application wide config is so useful
# Completed - 35. Optimizing our template cache by using an application config
# Completed - 36. A note about the next lecture
# Completed - 37. Sharing data with templates
# Completed - 38. Using pat for routing (created router.go & updated main.go)
# Completed - 39. Using chi for routing (updated router.go & main.go)
# Completed - 40. Developing our own middleware (created middleware.go & updated route.go & added nosurf)
# Completed - 41. Installing and setting up a sessions package (itroduced package scs)
# Completed - 42. Experimenting with sessions
# Completed - 43. What are we going to build?
# Completed - 44. Setting up our project
# Completed - 45. Enabling static files
# Completed - 46. Creating pages as HTML (this was covered already at start of lessons)
# Completed - 47. Creating a landing page (integrated into templates directly)
# Completed - 48. Creating a page for each room
# Completed - 49. Adding a form to search for availability
# Completed - 50. Improving our form
# Completed - 51. Creating the reservation page
# Completed - 52. What is Javascript, and why should I care?
# Completed - 53. Making a better date picker
# Completed - 54. Custom alerts using Notie
# Completed - 55. Creating modals with SweetAlert
# Completed - 56. Implementing a Javascript module
# Completed - 57. Adding custom alerts in our Javascript module
# Completed - 58. Using our Javascript module on the "Book Now" button
# Completed - 59. What is CSS, and how does it work?

Saving for later:
--> search-availability.page.tmpl
    <div class="row">
        <div class="col">
            <p id="myParagraph">This is some text.</p>
            <p class="paraClass secondClass">This is some text.</p>
            <p class="paraClass">This is some text.</p>
            <p id="lastPara">This is some text.</p>
            <p>
                <button id="colorButton" class="btn btn-outline-secondary">Click me</button>
            </p>
        </div>
    </div>

--> base.layout.tmpl - footer
            document.getElementById("colorButton").addEventListener("click", function () {
            //   notify("This is my message", "error")
            //   notifyModal("title", "<em>Hello, world!</em>", "success", "My button text")
            //  attention.toast({msg: "Hello from Toast", icon: "error"})
            //   attention.error({msg: "Hello with Error", footer: "This is my foot"})
            let html = `
            <form id="check-availability-form" action="" method="post novalidate" class="needs-validation">
                <div class="form-row">
                    <div class="col">
                        <div class="form-row" id="reservation-dates-modal">
                            <div class="col">
                                <input disabled required class="form-control" type="text" name="start" id="start" placeholder="Arrival">
                            </div>
                            <div class="col">
                                <input disabled required class="form-control" type="text" name="end" id="end" placeholder="Departure">
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            `
            attention.custom({msg: html, title: "Choose your dates"})
            })
# Completed - 60. Converting our pages to Go templates
# Completed - 61. Creating handlers for our forms & adding CSRF Protection (GET / POST / FORM / NoSurf)
# Completed - 62. Creating a handler that return JSON
# Completed - 63. Sending & processing an AJAX request
# Completed - 64. Sending AJAX post and generalizing our custom
# Completed - 65. Refactoring to use internal packages