package main

//pretty is not part of this lesson

import (
	"log"
	"sort"

	pretty "github.com/inancgumus/prettyslice"
)

type User struct {
	FirstName string
	LastName  string
}

func main() {

	// Map with String
	myMap := make(map[string]string)

	myMap["dog"] = "Samson"
	myMap["other-dog"] = "Cassie"

	log.Println(myMap["dog"])
	log.Println(myMap["other-dog"])

	// Map with Int
	myIntMap := make(map[string]int)

	myIntMap["First"] = 1
	myIntMap["Second"] = 2

	log.Println(myIntMap["First"])
	log.Println(myIntMap["Second"])

	// Own type map
	myUserMap := make(map[string]User)

	me := User{
		FirstName: "Ricardo",
		LastName:  "Wagemaker",
	}
	myUserMap["me"] = me

	log.Println(myUserMap["me"].FirstName, myUserMap["me"].LastName)

	/*
		You never have to bother pointing a passing a pointer to a map.
		You can just pass the map itself and that map will remain constant no matter where in the program it is accessed.
		Another point to know about maps is maps are programmatically built into the system, not sorted.
		So if you put things into a map in a certain order and then you try to access them later on, you cannot assume that they are going to be in the order.
	*/

	/*
		If you don't know what data type you you're going to be storing in there, you can in fact, and this is not recommended, but you can put in type interface followed by an opening and closing curly brackets,
		and that will actually store anything you want.
		The problem is you have to cast it from what it is in the map back into what it needs to be in order to be useful for you.
		So this is really kind of a kludge, and I wouldn't do that.
	*/

	// Slices = array data structure is like map but it can be sorted

	var mySlice []string
	mySlice = append(mySlice, "Ricardo")
	mySlice = append(mySlice, "John")
	mySlice = append(mySlice, "Mary")
	log.Println(mySlice)

	var myIntSlice []int
	myIntSlice = append(myIntSlice, 2)
	myIntSlice = append(myIntSlice, 1)
	myIntSlice = append(myIntSlice, 3)
	log.Println(myIntSlice)

	sort.Ints(myIntSlice)
	log.Println(myIntSlice)

	// Used shorthand to create a slice
	numbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	log.Println(numbers)
	// a range of numbers between 7,8,9
	log.Println(numbers[6:9])

	// a range of number from 5 to end
	log.Println(numbers[4:])

	// a range of number from start to 5
	log.Println(numbers[:5])

	// Use shorthand to create a slice of strings
	names := []string{"one", "seven", "fish", "cat"}
	log.Println(names[4:])
	pretty.Show("names", names)
	pretty.Show("names", names[1:4])
}
