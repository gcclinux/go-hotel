package main

import "log"

/*
POINTERS USED for updating varibles through memory location

So now that I have that memory address, I'm creating the new string called New Value, storing the value of reading it.
I'm saying go to that memory address that you received up here and change its contents from whatever they happen to be to this value.
So what I've effectively done is changed a locally scoped variable, a function, a variable that scope to the main function.
I changed its value by passing a reference or a pointer to that variable, to some function.
So that's what pointers are.
So when you need to get the reference to a variable, you put an ampersand in front of it.
When you need to refer to an actual pointer, you put an asterisk in front of it.
Now, this will become very useful to us as time goes on.

&varible = reference to a variable
*varible = the pointer it self

*/

func main() {
	myString := "Green"
	log.Println("myString is set to", myString)
	changeUsingPointer((&myString))
	log.Println("myString newVaule is set to", myString)
}

func changeUsingPointer(s *string) {
	log.Println("s memory value", s)
	newValue := "Red"
	*s = newValue
}
